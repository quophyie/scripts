# If you come from bash you might have to change your \$PATH.
# export PATH=\$HOME/bin:/usr/local/bin:\$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo \$RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="spaceship"

SPACESHIP_TIME_SHOW=true
SPACESHIP_DIR_TRUNC=0
SPACESHIP_USER_SHOW=always
SPACESHIP_HOST_SHOW=always
SPACESHIP_BATTERY_SHOW=always

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in \$ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see "man strftime" for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than \$ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in \$ZSH/plugins/
# Custom plugins may be added to \$ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
#plugins=(git)
plugins=(
	docker-compose
    docker
	extract
	git
    history-substring-search
    history
	npm
	node
    macos
    vim-interaction
	zsh-autosuggestions
	zsh-syntax-highlighting
	# zsh_reload
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:\$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n \$SSH_CONNECTION ]]; then
#   export EDITOR=''vim''
# else
#   export EDITOR=''mvim''
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias shopt='/usr/bin/shopt'

${sourceBashrcStanza}
# Source profile e.g. ~/.bash_profile

# as we dont expect 
# naively set the bashProfile env var. 
# if "~/.bash_profile" exists, means we are using RHEL based distro
# if "~/.bash_profile" exists, it means we are using a Debian based distro
# This is very naive way of testing what distro we are using but for now, its good enough
# A more robust solution would be to inspect /etc/os-release and get the OS flavour(i.e. ID_LIKE variable) from there

isRHEL="false"
isMacOS="false"
isFreeBSD="false"

if [ "$(uname)" = "Darwin" ]; then
  isMacOS="true"
fi

if [ "$(uname)" = "FreeBSD" ]; then
  isFreeBSD="true"
fi

if [ -f ~/.bash_profile ] ; then
    isRHEL="true"
	bashProfile=~/.bash_profile
elif [ -f ~/.profile ] ; then
	bashProfile=~/.profile
else
	ls -al ~
	echo "could not find ~/.bash_profile or ~/.profile"
	echo "bash profile config file will not be sourced"
fi

if [ -n "${bashProfile}" ]; then

	if [ "${isMacOS}" = "true" ]; then
                echo "sourcing ${bashProfile} for Mac OS ..."
	elif [ "${isFreeBSD}" = "true" ]; then 
		echo "sourcing ${bashProfile} for FreeBSD Unix System ..."
	elif [ "${isRHEL}" = "true" ]; then 
		echo "sourcing ${bashProfile} for RHEL based Distro ..."
	else
		echo "sourcing ${bashProfile} for Debian based Distro ..."
	fi
	
	source "${bashProfile}"

fi

# If we are in the TTY terminal console, set the font to ter-powerline-v14n
if [ "${isMacOS}" = "false" ] && [ "${isFreeBSD}" = "false" ]  && tty | grep -iP "^/dev/tty[1-6]{1,1}" ; then
  echo "Setting font to Powerline TTY font ter-powerline-v14n"
  setfont ter-powerline-v14n
fi

# Key Bindings
# Alt -> to jump one word forward
bindkey "[C" forward-word

# Alt <- to jump one word backward
bindkey "[D" backward-word

# Delete Word Backword bound to Alt+Backspace
# bindkey "^[^?" backward-kill-word
